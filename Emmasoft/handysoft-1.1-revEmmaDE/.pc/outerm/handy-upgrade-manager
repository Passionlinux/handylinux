#!/usr/bin/env python
# -*- coding:Utf-8 -*- 

"""

Auteur :      thuban 
licence :     GNU General Public Licence

Description : Gestionnaire de mise à jour simplifié
"""

from gi.repository import Gtk,GObject,Vte,GLib
import sys
import os
import locale
import apt

upgradecmd='dpkg --configure -a && apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" --yes --force-yes upgrade && apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" --yes --force-yes dist-upgrade && exit 0 || exit 1\n'

# Trads
apptitle = 'Upgrade Manager'
toptext = 'Do you want to upgrade your system ?'
upgradingtxt = 'Upgrading packages...\n Do not close this window nor shutdown your computer.'
finished = 'Your system is up-to-date.\nSee you soon {} ☺'.format(os.getlogin())
ask = 'Enter password to upgrade your system'
error = 'An error occurred.'
expanderlbl = 'Show more +'
nothing = 'Nothing to upgrade'
upgradeupgrader = 'Upgrade of handysoft before upgrading system'

LOCALE = locale.setlocale(locale.LC_ALL, "")[0:2]
if LOCALE == 'fr':
    apptitle = 'Gestionnaire de mise à jour'
    toptext = 'Voulez-vous mettre votre système à jour ?'
    upgradingtxt = 'Mise à jour en cours...\nNe fermez pas cette fenêtre, n\'éteignez pas l\'ordinateur.'
    finished = 'La mise à jour est terminée.\nÀ bientôt {} ☺.'.format(os.getlogin())
    ask = 'Entrez votre mot de passe pour mettre à jour le système'
    error = 'Une erreur est survenue.'
    expanderlbl = '+ Détails'
    nothing = 'Aucune mise à jour disponible'
    upgradeupgrader = 'Mise à jour du gestionnaire de mises à jour avant la mise à jour du système'

elif LOCALE == 'es':
    apptitle = 'Gestor de actualizaciones'
    toptext = '¿Quieres actualizar el sistema?'
    upgradingtxt = 'Actualización en curso ...\nNo cierre esta ventana, no apague el ordenador'
    finished = 'El sistema se ha actualizado.\nHasta luego {} ☺.'.format(os.getlogin())
    ask = 'Introduzca la contraseña para actualizar el sistema'
    error = 'Se ha producido un error.'
    expanderlbl = 'Mostrar más'
    nothing = 'No hay ninguna actualización disponible'
    upgradeupgrader = 'Actualización del gestor de actualizaciones antes de la actualización del sistema'

elif LOCALE == 'eo':
    apptitle = 'ĝisdatigo manaĝero'
    toptext = 'Volas ĝisdatigi vian sistemon ?'
    upgradingtxt = 'Ĝisdatigi daŭras...\nNe fermu fenestron, ne malŝalti la komputilon.'
    finished = 'La ĝisdatigo estas kompleta.\nRevido {} ☺.'.format(os.getlogin())
    ask = 'Entajpu vian pasvorton por ĝisdatigi la sistemon'
    error = 'Okazis eraro.'
    expanderlbl = '+ Detaloj'
    nothing = 'Neniu ĝisdatigo disponebla'
    upgradeupgrader = 'Ĝisdatigo ĝisdatigon direktisto antaŭ la sistemo ĝisdatigo'

elif LOCALE == 'de':
    apptitle = 'Update-Manager'
    toptext = 'Wollen Sie Ihr System zu aktualisieren?'
    upgradingtxt = 'Aktualisieren Sie läuft...\nSie dieses Fenster nicht schließen, schalten Sie den Computer nicht.'
    finished = 'Das Update ist abgeschlossen.\nSehen Sie {} ☺.'.format(os.getlogin())
    ask = 'Geben Sie Ihr Passwort, das System zu aktualisieren.'
    error = 'Ein Fehler ist aufgetreten.'
    expanderlbl = '+ Details'
    nothing = 'Kein Update verfügbar'
    upgradeupgrader = 'Update-Update-Manager vor dem System-Update'

elif LOCALE == 'it':
    apptitle = 'Update Manager'
    toptext = 'Vuoi aggiornare il sistema?'
    upgradingtxt = 'Aggiornamento in corso...\nNon chiudere questa finestra, non spegnere il computer.'
    finished = 'L\'aggiornamento è completo..\nCi vediamo {} ☺.'.format(os.getlogin())
    ask = 'Immettere la password per aggiornare il sistema'
    error = 'È verificato un errore.'
    expanderlbl = '+ Dettagli'
    nothing = 'Nessun aggiornamento disponibile'
    upgradeupgrader = 'Aggiornamento gestore degli aggiornamenti prima dell\'aggiornamento del sistema'

elif LOCALE == 'nl':
    apptitle = 'Update Manager'
    toptext = 'Wilt u uw systeem te updaten?'
    upgradingtxt = 'Werk in uitvoering...\nDit venster niet sluiten, niet uitschakelen van de computer.'
    finished = 'De update is voltooid.\nTot ziens {} ☺.'.format(os.getlogin())
    ask = 'Voer uw wachtwoord in om het systeem te updaten'
    error = 'Er is een fout opgetreden.'
    expanderlbl = '+ Details'
    nothing = 'Geen update beschikbaar'
    upgradeupgrader = 'Update manager voor de systeemupdate'

elif LOCALE == 'pt':
    apptitle = 'Gerenciador de atualização'
    toptext = 'Quer atualizar seu sistema?'
    upgradingtxt = 'Atualize em andamento...\nNão feche esta janela, não desligue o computador.'
    finished = 'A atualização está completa.\nVeja você {} ☺.'.format(os.getlogin())
    ask = 'Digite sua senha para atualizar o sistema'
    error = 'Ocorreu um erro.'
    expanderlbl = '+ Detalhes'
    nothing = 'Nenhuma atualização disponível'
    upgradeupgrader = 'Gerenciador de atualização atualização antes da atualização do sistema'

elif LOCALE == 'ru':
    apptitle = 'менеджер обновлений'
    toptext = 'Хотите обновить систему?'
    upgradingtxt = 'Обновление продолжается...\nНе закрывайте это окно, не выключайте компьютер.'
    finished = 'Обновление завершено.\nДо встречи {} ☺.'.format(os.getlogin())
    ask = 'Введите пароль для обновления системы'
    error = 'Произошла ошибка.'
    expanderlbl = '+ Подробнее'
    nothing = 'Нет доступных обновлений'
    upgradeupgrader = 'Менеджер обновлений Update перед обновлением системы'


def list_upgradeables_pkg():
    pkglist = ""
    cache=apt.Cache()
    cache.open(None)
    pkglist = ["{}\n{} : {} → {} ".format(pkglist,i.name, i.installed.version, i.candidate.version) for i in cache if i.is_upgradable ]
    return(pkglist)
    
class UpgradeMGR():

    def __init__(self, toupgrade):
        self.window = Gtk.Window(title=apptitle)
        self.window.set_border_width(10)
        self.window.set_size_request(380, -1)
        self.window.connect("delete-event", Gtk.main_quit)
        self.window.set_icon_from_file('/usr/share/icons/hicolor/16x16/actions/system-upgrade.png')

        self.box = Gtk.VBox(spacing=2) #conteneur principal
        self.window.add(self.box)
        
        self.titlelabel = Gtk.Label()
        self.titlelabel.set_markup("<b>{}</b>".format(toptext))
        self.box.pack_start(self.titlelabel, True, True, 2)

        # liste des paquets
        textbuffer = Gtk.TextBuffer()
        textbuffer.set_text("\n".join(toupgrade))

        textview = Gtk.TextView(buffer=textbuffer)
        textview.set_vexpand(True)
        textview.set_hexpand(True)

        self.scrolled_window = Gtk.ScrolledWindow()
        self.scrolled_window.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
        self.scrolled_window.add(textview)
        self.scrolled_window.set_size_request(450,200)

        # Progression
        self.progressbar = Gtk.ProgressBar()
        self.box.pack_start(self.progressbar, False, False, 2)
        
        # le VTE
        self.terminal     = Vte.Terminal()
        self.terminal.spawn_sync(
            Vte.PtyFlags.DEFAULT,
            os.environ['HOME'],
            ["/bin/bash" ],
            ["PS1=\n"],
            GLib.SpawnFlags.DO_NOT_REAP_CHILD,
            None,
            None,
            None,
            )
        self.terminal.connect("child-exited", self.end)
        self.terminal.set_size_request(500,250)
 
        expander = Gtk.Expander(label=expanderlbl)
        expander.set_resize_toplevel(True)

        expanderbox = Gtk.HBox()
        expanderbox.pack_start(self.scrolled_window, True, True, 0)
        expanderbox.pack_start(self.terminal, True, True, 0)

        expander.add(expanderbox)
        # on met dans la boîte
        self.box.pack_start(expander, True, True, 10)
        
        # boutons de validation/annulation
        self.buttonbox = Gtk.HBox()

        self.closebtn = Gtk.Button(stock = Gtk.STOCK_CLOSE)
        self.buttonbox.pack_start(self.closebtn, True, True, 5)

        self.okbtn = Gtk.Button(stock = Gtk.STOCK_OK)
        self.buttonbox.pack_start(self.okbtn, True, True, 5)

        self.copybtn = Gtk.Button(stock = Gtk.STOCK_COPY)
        self.buttonbox.pack_start(self.copybtn, True, True, 5)
        
        self.okbtn.connect("button_release_event", lambda x,y: self.upgrade())
        self.okbtn.connect("key_press_event", lambda x,y: self.upgrade())
        self.closebtn.connect("button_release_event", lambda x,y: Gtk.main_quit())
        self.closebtn.connect("key_press_event", lambda x,y: Gtk.main_quit())
        self.copybtn.connect("key_press_event", lambda x,y:self.copyterminal())
        self.copybtn.connect("button_release_event", lambda x,y:self.copyterminal())
        
        self.box.pack_start(self.buttonbox, True, True, 10)
        
        self.window.show_all()
        self.copybtn.hide()  
        self.progressbar.hide()  
        self.terminal.hide()  

    def upgrade(self):
        self.titlelabel.set_markup("<b>{}</b>".format(upgradingtxt))
        self.okbtn.hide()  
        self.closebtn.hide()  
        self.terminal.show()  
        self.scrolled_window.hide()  
        self.progressbar.show()  
        GObject.timeout_add(250,self.pulsate)
        self.terminal.feed_child(upgradecmd, len(upgradecmd))
        self.terminal.set_property("input-enabled", False)

    def copyterminal(self):
        self.terminal.select_all()
        self.terminal.copy_clipboard()

    def pulsate(self):
        self.progressbar.pulse()
        GObject.timeout_add(250, self.pulsate)

    def end(self, term, exitstatus):
        self.progressbar.hide()
        if exitstatus == 0:
            self.titlelabel.set_markup("<span size='large'>{}</span>".format(finished))
        else:
            self.titlelabel.set_markup("<span size='large'>{}</span>".format(error))
            self.copybtn.show()  

        self.closebtn.show()  

def noupgrade():
    from gi.repository import Notify
    n = Notify.init("handy-upgrade-manager")
    n = Notify.Notification.new("handy-upgrade-manager", nothing, "/usr/share/icons/hicolor/16x16/actions/system-upgrade.png")
    n.show()

def main():
    if os.geteuid() != 0:
        print("You need to have root privileges to run this script.")
        import subprocess
        status = subprocess.call('gksudo -m "{0}" {1}'.format(ask, os.path.realpath(__file__)), shell=True)
    elif os.geteuid() == 0:
        GObject.threads_init()
        toupgrade = list_upgradeables_pkg()
        if "handy-update-notifier" in toupgrade :
        # term upgrade
            import subprocess
            subprocess.call('gksudo -m {} exo-open --launch TerminalEmulator -e\
                apt-get -y install handy-update-notifier'.format(upgradeupgrader), shell=True)

        toupgrade = list_upgradeables_pkg()
        if len(toupgrade) > 0:
            win = UpgradeMGR(toupgrade)
            Gtk.main()
        else:
            noupgrade()
            print("Nothing to upgrade")
    
    return(0)
    
if __name__ == '__main__':
	main()
