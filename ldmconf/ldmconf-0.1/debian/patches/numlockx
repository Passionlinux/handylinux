Description: support du numlockX
 .
 ldmconf (0.1-3) jessie; urgency=medium
 .
   * simplification du code
   * élimination du lanceur
   * changement de l'image d'application
Author: arnault perret <arpinux@member.fsf.org>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- ldmconf-0.1.orig/ldmconf
+++ ldmconf-0.1/ldmconf
@@ -31,6 +31,8 @@ changeappear = "Change appearance"
 changefont = "Change font"
 themestxt = "GTK Theme"
 iconstxt = "Icons Theme"
+numlocktxt = "Activate numlock"
+titletxt = "LightDM configuration"
 msglist = ["Pizza forever", "The quick brown fox jumps over the lazy dog"]
 
 # traductions
@@ -46,6 +48,8 @@ if LOCALE == 'fr':
     changefont = "Modifier la police"
     themestxt = "Thème GTK"
     iconstxt = "Thème d'icônes"
+    numlocktxt = "Activer le pavé numérique"
+    titletxt = "Configuration de LightDM"
     msglist = ["Le gras, c'est la vie", "J'adore les crêpes",\
             "Portez ce vieux whisky au juge blond qui fume", \
             "Bâchez la queue du wagon-taxi avec les pyjamas du fakir",\
@@ -61,6 +65,7 @@ def listusers():
     return(users)
 
 def saveconfig(conf, conffile="/etc/lightdm/lightdm.conf"):
+    conf = "".join(conf)
     try:
         with open(conffile, 'w') as nc:
             nc.write(conf)
@@ -93,8 +98,7 @@ def autolog(user):
             newconf.append(l)
 
     if len(newconf) > 0:
-        newconftxt = "".join(newconf)
-        saveconfig(newconftxt)
+        saveconfig(newconf)
 
 def noauto():
     with open('/etc/lightdm/lightdm.conf', 'r') as oc:
@@ -110,8 +114,32 @@ def noauto():
             newconf.append(l)
 
     if len(newconf) > 0:
-        newconftxt = "".join(newconf)
-        saveconfig(newconftxt)
+        saveconfig(newconf)
+
+def donumlock(activate):
+    with open('/etc/lightdm/lightdm.conf', 'r') as oc:
+        oldconf = oc.readlines()
+        newconf = []
+        for l in oldconf:
+            if activate:
+                if l.startswith("#greeter-setup-script") :
+                    l = "greeter-setup-script=/usr/bin/numlockx on\n"
+            else:
+                if l.startswith("greeter-setup-script") :
+                    l = "#greeter-setup-script=\n"
+            newconf.append(l)
+
+    if len(newconf) > 0:
+        saveconfig(newconf)
+
+def isnumlock():
+    isactive = False
+    with open('/etc/lightdm/lightdm.conf', 'r') as oc:
+        conf = oc.readlines()
+        for l in conf:
+            if l.startswith("greeter-setup-script=/usr/bin/numlockx"):
+                isactive = True
+    return(isactive)
 
 def changebg(bgpath):
     if not os.path.isfile(bgpath):
@@ -127,8 +155,7 @@ def changebg(bgpath):
             newconf.append(l)
 
     if len(newconf) > 0:
-        newconftxt = "".join(newconf)
-        saveconfig(newconftxt, "/etc/lightdm/lightdm-gtk-greeter.conf")
+        saveconfig(newconf, "/etc/lightdm/lightdm-gtk-greeter.conf")
 
 
 def change_font(font):
@@ -146,8 +173,7 @@ def change_font(font):
             newconf.append(l)
 
     if len(newconf) > 0:
-        newconftxt = "".join(newconf)
-        saveconfig(newconftxt, "/etc/lightdm/lightdm-gtk-greeter.conf")
+        saveconfig(newconf, "/etc/lightdm/lightdm-gtk-greeter.conf")
 
 def change_theme(theme):
     with open('/etc/lightdm/lightdm-gtk-greeter.conf', 'r') as oc:
@@ -164,8 +190,7 @@ def change_theme(theme):
             newconf.append(l)
 
     if len(newconf) > 0:
-        newconftxt = "".join(newconf)
-        saveconfig(newconftxt, "/etc/lightdm/lightdm-gtk-greeter.conf")
+        saveconfig(newconf, "/etc/lightdm/lightdm-gtk-greeter.conf")
 
 
 def change_icons(icons):
@@ -183,12 +208,14 @@ def change_icons(icons):
             newconf.append(l)
 
     if len(newconf) > 0:
-        newconftxt = "".join(newconf)
-        saveconfig(newconftxt, "/etc/lightdm/lightdm-gtk-greeter.conf")
+        saveconfig(newconf, "/etc/lightdm/lightdm-gtk-greeter.conf")
+
 
 
+def applychanges(user, bg, font, theme, icons, numlock):
+
+    donumlock(numlock)
 
-def applychanges(user, bg, font, theme, icons):
     if bg != "":
         changebg(bg)
 
@@ -209,14 +236,11 @@ def applychanges(user, bg, font, theme,
 
 class LDMconf:
     def apply(self, widget, event):
-        if self.userselected == "" and self.newbg == "" \
-                and self.newfont == ""\
-                and self.newtheme == ""\
-                and self.newicons == "":
+        if not self.has_changed:
             self.label.set_text(nothingtodomsg)
         else:
             applychanges(self.userselected, self.newbg, self.newfont,\
-                    self.newtheme, self.newicons)
+                    self.newtheme, self.newicons, self.numlock)
             self.label.set_text(changesappliedmsg)
 
     def font_dialog(self, event, user_data):
@@ -263,6 +287,7 @@ class LDMconf:
         chooser.destroy()
 
     def on_user_changed(self, combo):
+        self.has_changed = True
         tree_iter = combo.get_active_iter()
         if tree_iter != None:
             model = combo.get_model()
@@ -270,6 +295,7 @@ class LDMconf:
             self.userselected = user
 
     def on_theme_changed(self, combo):
+        self.has_changed = True
         tree_iter = combo.get_active_iter()
         if tree_iter != None:
             model = combo.get_model()
@@ -277,12 +303,22 @@ class LDMconf:
             self.newtheme = user
 
     def on_icons_changed(self, combo):
+        self.has_changed = True
         tree_iter = combo.get_active_iter()
         if tree_iter != None:
             model = combo.get_model()
             user = model[tree_iter][0]
             self.newicons = user
 
+    def on_switch_activated(self, switch, gparam):
+        self.has_changed = True
+        if switch.get_active():
+            self.numlocklbl.set_label("On")
+            self.numlock = True
+        else:
+            self.numlocklbl.set_label("Off")
+            self.numlock = False
+
     def close_application(self, widget, event):
         Gtk.main_quit()
         return False
@@ -292,7 +328,9 @@ class LDMconf:
         self.newfont = ""
         self.newtheme = ""
         self.newicons = ""
+        self.numlock = isnumlock() 
         self.userselected= "" # to know which user choosed
+        self.has_changed = False
 
         self.window = Gtk.Window()
         self.window.connect("delete_event", self.close_application)
@@ -304,10 +342,17 @@ class LDMconf:
         vbox.set_border_width(10)
         self.window.add(vbox)
 
-        # pitite image, comprendra qui pourra
+        # Titre
+        
+        box = Gtk.HBox()
+        title = Gtk.Label()
+        title.set_markup("<b>{}</b>".format(titletxt))
         if os.path.isfile("/usr/share/pixmaps/handymenu_icon.png"):
             image = Gtk.Image().new_from_file("/usr/share/pixmaps/handymenu_icon.png")
-            vbox.pack_start(image, False, False, 5)
+            box.pack_start(image, False, False, 10)
+        
+        box.pack_start(title, True, True, 10)
+        vbox.pack_start(box, False, False, 5)
 
         # Choix d'utilisateur
         users_store = Gtk.ListStore(str)
@@ -325,6 +370,25 @@ class LDMconf:
         frame.add(users_combo)
         vbox.pack_start(frame, True, True, 0)
 
+        # numlock
+        frame = Gtk.Frame(label = numlocktxt)
+
+        if self.numlock:
+            self.numlocklbl = Gtk.Label("On")
+        else:
+            self.numlocklbl = Gtk.Label("Off")
+
+        numlockbtn = Gtk.Switch()
+        numlockbtn.connect("notify::active", self.on_switch_activated)
+        numlockbtn.set_active(self.numlock)
+
+        box = Gtk.HBox()
+        box.pack_start(self.numlocklbl, True, True, 5)
+        box.pack_start(numlockbtn, False, False, 5)
+
+        frame.add(box)
+        vbox.pack_start(frame, True, True, 0)
+
         # apparence
         frame = Gtk.Frame(label = changeappear)
         appearbox = Gtk.VBox()
--- ldmconf-0.1.orig/ldmconf.1
+++ ldmconf-0.1/ldmconf.1
@@ -16,6 +16,7 @@ Avec ldmconf, vous pouvez configurer :
     * La connexion automatique pour un utilisateur
     * Changer le fond d'écran à la connexion
     * Modifier l'apparence de l'écran de connexion : police, thème GTK et thème d'icônes.
+    * Activer le verouillage automatique du pavé numérique
 .RE
 
 .SH BUGS
